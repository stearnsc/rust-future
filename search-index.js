var searchIndex = {};
searchIndex["future"] = {"doc":"","items":[[3,"Future","future","A handle on the result of an asynchronous compution that allows for transformations and\nside effects.",null,null],[3,"FutureSetter","","The mechanism by which the result of a `Future` is resolved.",null,null],[3,"DroppedSetterError","","An Error indicating that the `FutureSetter` for the associated `Future` left scope and was\ndropped before setting the result of the `Future`.",null,null],[5,"join2","","",null,{"inputs":[{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"join3","","",null,{"inputs":[{"name":"future"},{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"join4","","",null,{"inputs":[{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"join5","","",null,{"inputs":[{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"join6","","",null,{"inputs":[{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"join7","","",null,{"inputs":[{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"join8","","",null,{"inputs":[{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"join9","","",null,{"inputs":[{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"join10","","",null,{"inputs":[{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"join11","","",null,{"inputs":[{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"join12","","",null,{"inputs":[{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"},{"name":"future"}],"output":{"name":"future"}}],[5,"new","","",null,null],[5,"value","","Create a resolved successful `Future` from an `A`",null,{"inputs":[{"name":"a"}],"output":{"name":"future"}}],[5,"err","","Create a resolved error `Future` from an `E`",null,{"inputs":[{"name":"e"}],"output":{"name":"future"}}],[5,"done","","Create a resolved `Future` from an existing Result",null,{"inputs":[{"name":"result"}],"output":{"name":"future"}}],[5,"await","","",null,{"inputs":[{"name":"future"}],"output":{"name":"result"}}],[5,"await_safe","","",null,{"inputs":[{"name":"future"}],"output":{"name":"result"}}],[5,"run","","Execute function `F` in a new thread, returning a `Future` of the result.",null,{"inputs":[{"name":"f"}],"output":{"name":"future"}}],[11,"is_resolved","","Checks whether the result on the Future has been set\n# Examples\nlet (future, setter) = future::new::&lt;i64, ()&gt;();\nassert(future.is_resolved() == false);\nsetter.set_result(Ok(0));\nassert(future.is_resolved());",0,{"inputs":[{"name":"future"}],"output":{"name":"bool"}}],[11,"map","","Transform a successful value when the transformation cannot fail.\n# Examples\n```\nuse future;\nuse future::Future;",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"map_err","","Transform an error value into another.\n# Examples\n```\nuse future;\nuse future::Future;",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"handle","","Transform an error value into a success value.\n# Examples\n```\nuse future;\nuse future::Future;",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"and_then","","Transform a success value when the transformation might fail. Returns an Err&lt;E&gt; if either\nthe original computation or the transformation fail. The error type of the transformation\nmust have an instance of Into&lt;E&gt; so that the final result has the same error type.\n# Examples\n```\nuse future;\nuse future::Future;\nuse std::num;",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"rescue","","Like `handle`, except when the error transformation could fail.",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"transform","","The most general Future transformation; Transform the result of a `Future`, changing the\nsuccess and error types if desired.",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"and_thenf","","Like `and_then`, except when the transformation returns another `Future` instead of a\n`Result`",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"bind","","Monadic `bind`; same as `and_thenf`",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"rescuef","","Like `rescue`, except when the transformation returns another `Future` instead of a\n`Result`",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"transformf","","Like `transform`, except when the transformation returns another `Future` instead of a\n`Result`",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"on_err","","",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"on_success","","",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"on_completion","","",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"resolve_success","","Stores the side-effecting `f` to be run once the `Future` completes. `f` will only run if\nthe `Future` resolves successfully; an error result will be dropped. This consumes the\n`Future`",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":null}],[11,"resolve_err","","Stores the side-effecting `f` to be run once the `Future` completes. `f` will only run if\nthe `Future` resolves unsuccessfully; a successful result will be dropped. This consumes the\n`Future`",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":null}],[11,"resolve","","Stores the side-effecting `f` to be run once the `Future` completes. This consumes the\n`Future`, and is the most common method of consuming the final result of a `Future`\ncomputation.",0,{"inputs":[{"name":"future"},{"name":"f"}],"output":null}],[11,"flatten","","Flatten a `Future&lt;Future&lt;A, E2&gt;, E&gt;` into a Future&lt;A, E&gt;, where `E: From&lt;E2&gt;`",0,{"inputs":[{"name":"future"}],"output":{"name":"future"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"set_result","","Sets the result of the associated `Future`. This call will also execute any side-effects or\ntransformations associated with the `Future`.",1,{"inputs":[{"name":"futuresetter"},{"name":"result"}],"output":null}],[11,"callback_set","","",1,{"inputs":[{"name":"futuresetter"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"droppedsettererror"}],"output":{"name":"droppedsettererror"}}],[11,"fmt","","",2,{"inputs":[{"name":"droppedsettererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"droppedsettererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"droppedsettererror"}],"output":{"name":"str"}}]],"paths":[[3,"Future"],[3,"FutureSetter"],[3,"DroppedSetterError"]]};
initSearch(searchIndex);
